<?php

include_once('fserver.features.inc');

define('FSERVER_EXTRATYPE_RELEASE', 50);
define('FSERVER_EXTRATYPE_RC', 40);
define('FSERVER_EXTRATYPE_BETA', 30);
define('FSERVER_EXTRATYPE_ALPHA', 20);
define('FSERVER_EXTRATYPE_UNSTABLE', 10);
define('FSERVER_EXTRATYPE_OTHER', 0);

/**
 * Implements hook_link().
 */
function fserver_link($type, $object, $teaser = FALSE) {
}

/**
 * Implements hook_node_view().
 */
function fserver_node_view($node, $view_mode = 'full') {
  if ($node->type == 'fserver_distro' && is_object(menu_get_object()) && menu_get_object()->nid === $node->nid) {
    //$node->content['field_fserver_drushmake'][0]['value'] = '<code>'. $node->field_fserver_drushmake[0]['value'] .'</code>';
    $node->content['field_fserver_drushmake'][0]['#markup'] = '<fieldset>' . implode('<br />', explode("\r\n", $node->content['field_fserver_drushmake']['#items'][0]['safe_value'])) . '</fieldset>';
    $view = views_get_view('fserver_releases');
    $view->execute('recommended');
    if ($view->result) {
      $node->content['releases'] = array(
        '#type' => 'item',
        '#title' => 'Releases',
        '#markup' => $view->render(),
        '#weight' => 1
      );
    }
  }
  if ($node->type == 'fserver_project' && is_object(menu_get_object()) && menu_get_object()->nid === $node->nid) {
    $url = url("fserver", array('purl' => array('disabled' => TRUE), 'absolute' => TRUE));
    $items = field_get_items('node', $node, 'field_fserver_name', $node->language);
    $project = check_plain($items[0]['value']);
    $node->content['project_info'] = array(
      '#type' => 'fieldset',
      'info' => array(
        '#access' => node_access('update', $node),
        '#title' => t("For <code>@project.info</code>", array('@project' => $project)),
        '#type' => 'item',
        '#markup' => "<code>project status url = {$url}</code>",
      ),
      'drush_make' => array(
        '#title' => t("For <code>drush make</code> makefiles"),
        '#type' => 'item',
        '#markup' => "<code>projects[{$project}][location] = {$url}</code>",
      ),
      '#weight' => -10,
    );
    $items = field_get_items('node', $node, 'field_fserver_method', $node->language);
    if (empty($items[0]['value'])) {
      // Only allow releases to be added if packaging method is 0 => 'Manual'.
      $item = menu_get_item('node/add/fserver-release');
      if ($item && $item['access']) {
        $node->content['links'] = array(
          '#theme' => 'links',
          '#links' => array(
            'feserver-add-release' => array(
              'title' => t('Add new @release', array('@release' => strtolower($item['title']))),
              'href' => 'node/add/fserver-release/' . $node->nid,
            )
          ),
          '#attributes' => array('class' => array('links', 'inline', 'nowrap')),
          '#weight' => 2,
        );
      }
    }
    $view = views_get_view('fserver_releases');
    $view->execute('recommended');
    if ($view->result) {
      $node->content['releases'] = array(
        '#type' => 'item',
        '#title' => 'Releases',
        '#markup' => $view->render(),
        '#weight' => 1
      );
    }
  }
  if ($node->type == 'fserver_release') {
    drupal_add_css(drupal_get_path('module', 'fserver') . '/fserver.css');
    $items = field_get_items('node', $node, 'field_fserver_file', $node->language);
    $download_url = file_create_url($items[0]['uri']);
    $contents = file_exists(file_create_url($items[0]['uri'])) ? file_get_contents(file_create_url($items[0]['uri'])) : '';
    $info = array();
    $info[] = t('Download: !url', array('!url' => l($download_url, $download_url, array('absolute' => TRUE))));
    $info[] = t('md5 hash: !md5', array('!md5' => md5($contents)));
    $info[] = t('Size: !size', array('!size' => format_size($items[0]['filesize'])));
    $node->content['fserver_info'] = array(
      '#type' => 'fieldset',
      'content' => array(
        '#type' => 'markup',
        '#markup' => theme('item_list', array('items' => $info, 'title' => NULL, 'type' => 'ul', 'attributes' => array('id' => 'fserver-release-info'))),
      ),
      '#weight' => -10,
    );
    $items = field_get_items('node', $node, 'field_fserver_project', $node->language);
    $project = node_load($items[0]['nid']);
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l($project->title, 'node/' . $project->nid)));
  }
}

/**
 * Implements hook_node_presave().
 */
function fserver_node_presave($node) {
  if ($node->type == 'fserver_project') {
    if (empty($node->field_fserver_method[0]['value'])) {
      $node->field_fserver_repository[0]['value'] = '';
    }
  }
  if ($node->type == 'fserver_release') {
    $node->title = fserver_generate_version($node);

    // If this release is recommended, set all other ones to not recommended.
    if ($node->field_fserver_recommended[$node->language][0]['value'] == 1) {
      $view = views_get_view('fserver_releases');
      $view->set_arguments(array($node->field_fserver_project[$node->language][0]['nid'], $node->field_fserver_api[$node->language][0]['value']));
      $view->execute('block_1');
      foreach ($view->result as $data) {
        if (!isset($node->nid) || $data->nid != $node->nid) {
          $release = node_load($data->nid);
          $release->field_fserver_recommended[$release->language][0]['value'] = 0;
          node_save($release);
        }
      }
    }
  }
}

/**
 * Option field callback for version options.
 */
function fserver_cck_options($type = 'core') {
  switch ($type) {
    case 'core':
      $result =  drupal_map_assoc(array('5.x', '6.x', '7.x'));
      break;
    case 'major':
      $major = range(0, 50);
      unset($major[0]);
      $result =  $major;
      break;
    case 'method':
      $result =  array(
        0 => t('Manual upload'),
        'git' => t('GIT repository tags'),
        'svn' => t('SVN repository tags folder'),
      );
      break;
    case 'patch':
      $result = range(0, 50);
      break;
    case 'recommended':
      $result =  array(t('Not recommended'), t('Recommended'));
      break;
    case 'security':
      $result =  array(t('Not a security release'), t('Security release'));
      break;
    case 'type':
      // We don't use t() here as the update XML requires these strings to be uniform.
      $result = array(
        // 'core' => 'Drupal project',
        'profile' => 'Installation profiles',
        'module' => 'Modules',
        'theme' => 'Themes',
        // 'theme engine' => 'Theme engines',
        // 'translation' => 'Translations',
      );
      break;
    case 'extratype':
      // We don't use t() here as the update XML requires these strings to be uniform.
      $result = array(
        FSERVER_EXTRATYPE_RELEASE => '- None -',
        FSERVER_EXTRATYPE_RC => 'rc',
        FSERVER_EXTRATYPE_BETA => 'beta',
        FSERVER_EXTRATYPE_ALPHA => 'alpha',
        FSERVER_EXTRATYPE_UNSTABLE => 'unstable',
        FSERVER_EXTRATYPE_OTHER => 'other',
      );
      break;
    case 'extranum':
      $extranum = range(0, 50);
      unset($extranum[0]);
      $result =  $extranum;
      break;
  }

  drupal_alter('fserver_cck_options', $result, $type);

  return $result;
}

/**
 * Parse a package name into values: core, major, patch and extra.
 */
function fserver_parse_package_name($package_filename) {
  // example: fserver-6.x-2.0-rc3.tar.gz
  if (preg_match('/^(?<project>\w+)-(?<core>\d+\.x)-(?<major>\d+)\.(?<patch>\d+)-?(?<extra>\w+)?\.(tar\.gz|tgz)$/', $package_filename, $matches)) {
    if (!empty($matches['extra']) && preg_match('/^(?P<extratype>[A-Za-z]+)(?P<extranum>\d+)?$/', $matches['extra'], $extra_matches)) {
      $matches = array_merge($matches, array_intersect_key($extra_matches, array('extratype' => '', 'extranum' => '')));
    }
    return $matches;
  }
  return array();
}

/**
 * Parse a tag name into values: core, major, patch and extra, extra type and extra num.
 *
 * Supports CVS style drupal tags (drupal-6--1-0-alpha1) as well as git style tags (7.x-1.0-alpha1).
 */
function fserver_parse_tag_name($tag) {

  $regex = (stripos($tag, 'drupal-') === 0)
              ? '/^(?P<project>\w+)-(?P<core>\d+)--(?P<major>\d+)-(?P<patch>\d+)-?(?P<extra>\w+)?$/'
              : '/^(?P<core>\d+)\.x-(?P<major>\d+)\.(?P<patch>\d+)-?(?P<extra>\w+)?$/';

  if (preg_match($regex, $tag, $matches)) {
    $parsed = array_intersect_key($matches, array('core' => '', 'major' => '', 'patch' => '', 'extra' => ''));
    if (!empty($parsed)) {
      $parsed['original'] = $tag;
      $parsed['core'] = "{$parsed['core']}.x";
      $parsed['version'] = "{$parsed['core']}-{$parsed['major']}.{$parsed['patch']}" . (!empty($parsed['extra']) ? "-{$parsed['extra']}" : '');
      if (!empty($parsed['extra']) && preg_match('/^(?P<extratype>[A-Za-z]+)(?P<extranum>\d+)?$/', $parsed['extra'], $extra_matches)) {
        $parsed = array_merge($parsed, array_intersect_key($extra_matches, array('extratype' => '', 'extranum' => '')));
      }
      return $parsed;
    }
  }

  return array();
}

/**
 * Implements hook_form_alter() for fserver_project_node_form().
 */
function fserver_form_fserver_project_node_form_alter(&$form, $form_state) {
  drupal_add_js(drupal_get_path('module', 'fserver') . '/fserver.js');
  $form['#validate'][] = 'fserver_project_node_form_validate';
}

/**
 * Validate handler for fserver_project_node_form.
 */
function fserver_project_node_form_validate($form, &$form_state) {
  $language = $form_state['values']['language'];
  // Ensure repository URL is set if using a non-manual method.
  if (!empty($form_state['values']['field_fserver_method'][$language][0]['value']) && empty($form_state['values']['field_fserver_repository'][$language][0]['value'])) {
    form_set_error('field_fserver_repository][' . $language . '][0][value', t('Please provide a valid repository URL for this project.'));
  }
}

/**
 * Implements hook_form_alter() for fserver_release_node_form().
 */
function fserver_form_fserver_release_node_form_alter(&$form, $form_state) {
  drupal_add_css(drupal_get_path('module', 'fserver') . '/fserver.css');
  $form['title'] = array(
    '#type' => 'value',
    '#value' => 'VOID',
  );
  $form['#submit'][] = 'fserver_release_node_form_submit';
}

/**
 * Submit handler for fserver_release_node_form.
 */
function fserver_release_node_form_submit($form, &$form_state) {
  // Only do something, if the user clicked the preview button.
  if (isset($form_state['clicked_button']['#submit']) && in_array('node_form_build_preview', $form_state['clicked_button']['#submit'])) {
    $node = node_submit($form_state['values']);
    $node->title = fserver_generate_version($node);
    $form_state['values'] = (array) $node;
  }
}

/**
 * Generate a standard version string from a node object.
 * @TODO: Merge this or make use of it in fserver_handler_field_release_tag::render().
 */
function fserver_generate_version($node, $raw = FALSE) {
  $project = node_load($node->field_fserver_project[$node->language][0]['nid']);
  $core  = $node->field_fserver_api[$node->language][0]['value'];
  $major = $node->field_fserver_versionmajor[$node->language][0]['value'];
  $patch = $node->field_fserver_versionpatch[$node->language][0]['value'];
  if (!empty($node->field_fserver_versionextra[$node->language])) {
    $extra = $node->field_fserver_versionextra[$node->language][0]['value'];
  }
  $version = "{$core}-{$major}.{$patch}" . (!empty($extra) ? "-{$extra}" : '');
  return $raw ? $version : "{$project->title} $version";
}

/**
 * Implements hook_form_alter()
 */
function fserver_form_alter(&$form, $form_state, $form_id) {
  if (in_array($form_id, array('fserver_project_node_form', 'fserver_distro_node_form'))) {
    // Lets make the machine name magic.
    $form['field_fserver_name'][$form['language']['#value']][0]['value']['#type'] = 'machine_name';
    $form['field_fserver_name'][$form['language']['#value']][0]['value']['#machine_name'] = array(
      'source' => array('title'),
      'exists' => 'fserver_machine_name_exists',
      'label' => t('Machine Name'),
      'replace_pattern' => '[^a-z0-9_]+',
      'replace' => '_',
    );
  }
}

/**
 * Make sure the machine name is unique
 */
function fserver_machine_name_exists() {
  // TODO: make this work.
  return FALSE;
}
